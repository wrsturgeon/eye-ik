#![no_std]
#![no_main]
#![feature(async_trait_bounds, impl_trait_in_assoc_type)]

use {
    defmt_rtt as _,
    embassy_executor::Spawner,
    embassy_rp::{
        bind_interrupts,
        peripherals::{UART1, USB},
        pwm::SetDutyCycle as _,
        uart, usb,
    },
    embassy_time::{Duration, Ticker, Timer},
    eye_bot_inverse_kinematics::{ik, pwm},
    fixed::{FixedU16, FixedU32, traits::LosslessTryFrom, types::extra::U4},
    panic_probe as _,
};

bind_interrupts!(struct Irqs {
    UART1_IRQ => uart::InterruptHandler<UART1>;
    USBCTRL_IRQ => usb::InterruptHandler<USB>;
});

const SERVO_PWM_PERIOD_MS: u16 = 20;
const SERVO_PWM_FREQ_HZ: u16 = 1000 / SERVO_PWM_PERIOD_MS;

const WAVE_PERIOD_MS: u16 = 1000;
const MAIN_LOOP_PERIOD_MS: u16 = SERVO_PWM_PERIOD_MS;

#[embassy_executor::main]
async fn main(spawner: Spawner) {
    let p = embassy_rp::init(Default::default());

    {
        // USB background task:
        #[embassy_executor::task]
        pub async fn task(driver: usb::Driver<'static, USB>) {
            embassy_usb_logger::run!(1024, log::LevelFilter::Info, driver);
        }
        let () = match spawner.spawn(task(usb::Driver::new(p.USB, Irqs))) {
            Ok(()) => defmt::info!("Spawned USB task"),
            Err(e) => {
                log::error!("Error spawning USB task");
                Timer::after(Duration::from_secs(1)).await;
                defmt::panic!("Error spawning USB task: {}", e);
            }
        };
    }

    let (pwm_hip, pwm_knee) = pwm::init_slice(p.PWM_SLICE7, p.PIN_14, p.PIN_15);

    let leg = ik::Leg::default();

    let mut counter: u16 = 0;
    let mut ticker = Ticker::every(Duration::from_millis(MAIN_LOOP_PERIOD_MS as _));
    loop {
        let theta =
            (counter as f32) * const { 2.0 * core::f32::consts::PI / (WAVE_PERIOD_MS as f32) };

        let x = 2.75 + libm::cosf(theta);
        let y = -5.85 - libm::sinf(theta);
        let xy = (x, y);
        let vec_from_knee_to_foot = ik::Cartesian { x, y };

        let servos = leg
            .inverse_kinematics(vec_from_knee_to_foot)
            .map(|ik::Servos { hip, knee }| (hip, knee));

        log::info!("");
        log::info!("Cartesian: {:01.2?}", Result::<_, ()>::Ok(xy));
        log::info!("Servo(IK): {servos:01.2?}");

        if let Ok((hip, knee)) = servos {
            match pwm_hip.set_duty_cycle((pwm_ctr - pwm_rng * hip) as _) {
                Ok(()) => {}
                Err(e) => log::error!("Couldn't set hip duty cycle: {e:?}"),
            }
            match pwm_knee.set_duty_cycle((pwm_ctr + pwm_rng * knee) as _) {
                Ok(()) => {}
                Err(e) => log::error!("Couldn't set knee duty cycle: {e:?}"),
            }
        }

        let () = ticker.next().await;
        counter += MAIN_LOOP_PERIOD_MS;
        if counter >= WAVE_PERIOD_MS {
            counter -= WAVE_PERIOD_MS;
        }
    }
}
